/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Snarly;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.json.JSONArray;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class TestLevel {

    public static void main(String[] args) {
        ObjectMapper objectMapper = new ObjectMapper();
        String jsonString = InputParser.getInstance().parseUserJson();
        Level level;
        Output output = null;
        Set<Integer[]> uniqueRoomOrigins = new HashSet<>();
        try {
            System.out.println(jsonString);
            JSONArray jsonArray = new JSONArray(jsonString);
            level = objectMapper.readValue(jsonArray.getJSONObject(0).toString(), Level.class);
            Integer[] point = objectMapper.readValue(jsonArray.getJSONArray(1).toString(), Integer[].class);
            Object objectOnPoint = level.getObjects().stream().filter(i -> i.isObjectOnPoint(point)).findAny().orElse(null);
            for (Room room : level.getRooms()) {
                if (room.isPointWithinRoom(point)) {
                    Set<Hallway> hws = level.getHallways().stream()
                            .filter(i -> room.isPointWithinRoom(i.getFrom()) || room.isPointWithinRoom(i.getTo()))
                            .collect(Collectors.toSet());

                    for(Hallway p : hws) {
                        uniqueRoomOrigins.addAll(level.getRooms()
                                .stream()
                                .filter(i -> !Arrays.equals(room.getOrigin(), i.getOrigin()))
                                .filter(i -> i.isPointWithinRoom(p.getTo()) || i.isPointWithinRoom(p.getFrom()))
                                .map(Room::getOrigin).collect(Collectors.toSet()));

                    }
                    if (uniqueRoomOrigins.isEmpty()) {
                        uniqueRoomOrigins = new HashSet<>();
                    }
                    output = new Output(room.isTraversable(point), objectOnPoint == null ? null : objectOnPoint.getType(), "room", uniqueRoomOrigins);
                }
            }

            for (Hallway hallway: level.hallways) {

                if (hallway.isPointInHallway(point)) {
                    uniqueRoomOrigins.addAll(level.getRooms()
                            .stream()
                            .filter(i -> i.isPointWithinRoom(hallway.getFrom()) || i.isPointWithinRoom(hallway.getTo()))
                            .map(Room::getOrigin).collect(Collectors.toSet()));

                    output = new Output(hallway.isTraversable(point), objectOnPoint == null ? null : objectOnPoint.getType(), "hallway", uniqueRoomOrigins);
                }
            }

            if (output == null) {
                output = new Output(false, null, "void");
            }

            System.out.println(objectMapper.writeValueAsString(output));
        } catch (Exception j) {
            j.printStackTrace();
        }
    }
}
