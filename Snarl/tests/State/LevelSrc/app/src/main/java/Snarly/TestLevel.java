/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Snarly;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.json.JSONArray;
import org.json.JSONObject;

import java.util.*;

public class TestLevel {

    public static void main(String[] args) {
        ObjectMapper objectMapper = new ObjectMapper();
        String jsonString = InputParser.getInstance().parseUserJson();
        State state;
        String name;
        List<String> outputArray = new LinkedList<>();
        try {
            JSONArray jsonArray = new JSONArray(jsonString);
            state = objectMapper.readValue(jsonArray.getJSONObject(0).toString(), State.class);
            name = jsonArray.getString(1);
            Integer[] point = objectMapper.readValue(jsonArray.getJSONArray(2).toString(), Integer[].class);

            // [ "Failure", "Player ", (name), " is not a part of the game." ]
            Optional<ActorPosition> actorType = state.getPlayers()
                    .stream()
                    .filter(i -> i.getName().equals(name))
                    .findFirst();
            if (!actorType.isPresent()) {
                outputArray = new LinkedList<>(Arrays.asList("Failure", "Player ", name, " is not a part of the game."));
                System.out.println(objectMapper.writeValueAsString(outputArray));
                return;
            }

            boolean isPointTraversableInRooms = state.getLevel().getRooms()
                    .stream()
                    .anyMatch(s -> s.isTraversable(point));
            boolean isPointTraversable = isPointTraversableInRooms || state.getLevel().getHallways().stream().anyMatch(s -> s.isPointInHallway(point));

            //[ "Failure", "The destination position ", (point), " is invalid." ]
            if (!isPointTraversable) {
                JSONArray op = new JSONArray(Arrays.asList("Failure", "The destination position ", point, " is invalid."));
                System.out.println(op.toString());
                return;
            }
            boolean isLandedOnExit = state.getLevel().getObjects()
                    .stream()
                    .anyMatch(i -> i.isObjectOnPoint(point) && i.getType().equals("exit"));
            if (isLandedOnExit) {
                //[ "Success", "Player ", (name), " exited.", (state) ]
                JSONArray op = new JSONArray(Arrays.asList("Success", "Player ", name, " exited.", state));
                System.out.println(op.toString());
                return;
            }

            boolean isAdversaryInPoint = state.getAdversaries().stream().anyMatch(i -> i.isActorInPosition(point));
            //            [ "Success", "Player ", (name), " was ejected.", (state) ]
            if (isAdversaryInPoint) {
                JSONArray op = new JSONArray(Arrays.asList( "Success", "Player ", name, " was ejected.", state ));
                System.out.println(op.toString());
                return;
            }

            //            [ "Success", (state) ]
            // if no rule is violated we print success
            JSONArray op = new JSONArray(Arrays.asList(  "Success", state  ));
            System.out.println(op.toString());


        } catch (Exception j) {
            j.printStackTrace();
        }
    }
}
