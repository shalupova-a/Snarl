/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Game;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.json.JSONArray;
import org.json.JSONObject;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class TestManager {

    private static ObjectMapper objectMapper = new ObjectMapper();
    private static String jsonString = InputParser.getInstance().parseUserJson();
    private static List<String> playerNames;
    private static JSONObject level;
    private static State state;
    private static Integer turns;
    private static JSONArray pointList;
    private static JSONArray actorMoveListList;
    private static List<String> outputArray = new LinkedList<>();
    private static List managerTrace;
    private static GameManager gameManager;

    public static void main(String[] args) {

        try {
            JSONArray jsonArray = new JSONArray(jsonString);
            playerNames = objectMapper.readValue(jsonArray.getJSONArray(0).toString(), List.class);
            level = (JSONObject) jsonArray.getJSONObject(1);
            turns = objectMapper.readValue(Integer.toString(jsonArray.getInt(2)), Integer.class);
            pointList = (JSONArray) jsonArray.getJSONArray(3);
            actorMoveListList = (JSONArray) jsonArray.getJSONArray(4);

            JSONObject jsonState = createInitState();
            state = objectMapper.readValue(jsonState.toString(), State.class);

            GameManager manager = new GameManager(state, actorMoveListList, turns);

            managerTrace = manager.makeMoves();
            state = manager.getState();

            outputArray = new LinkedList(Arrays.asList(objectMapper.writeValueAsString(state), managerTrace));
            System.out.println(outputArray);

        } catch (Exception j) {
            j.printStackTrace();
        }
    }

    private static JSONObject createInitState() {
        JSONArray jsonPlayers = initPlayers();
        JSONArray jsonAdversaries = initAdversaries();
        JSONObject jsonState = new JSONObject().put("type", "state");
        jsonState.put("players", jsonPlayers);
        jsonState.put("adversaries", jsonAdversaries);
        jsonState.put("exit-locked", true);
        jsonState.put("level", level);

        return jsonState;
    }

    private static JSONArray initPlayers() {
        JSONArray jsonPlayers = new JSONArray();
        for (int i = 0; i < playerNames.size(); i++) {
            JSONObject jsonPlayer = new JSONObject();
            jsonPlayer.put("type", "player");
            jsonPlayer.put("name", playerNames.get(i));
            jsonPlayer.put("position", pointList.getJSONArray(0));
            pointList.remove(0);
            jsonPlayers.put(jsonPlayer);
        }

        return jsonPlayers;
    }

    private static JSONArray initAdversaries() {
        JSONArray jsonAdversaries = new JSONArray();
        if (pointList.length() > 0) {
            for (int i = 0; i < pointList.length(); i++) {
                JSONObject jsonAdversary = new JSONObject();
                jsonAdversary.put("type", "zombie");
                jsonAdversary.put("name", "Z" + i);
                jsonAdversary.put("position", pointList.getJSONArray(i));
                jsonAdversaries.put(jsonAdversary);
            }
        }
        return jsonAdversaries;
    }
}
