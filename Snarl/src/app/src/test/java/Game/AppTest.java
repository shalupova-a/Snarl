/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Game;

import Game.Controller.GameManager;
import Game.Model.*;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.*;

public class AppTest {

    @Test public void checkRoomBounds() throws Exception {
        Integer[][] tilesRoom1 = { {0, 0, 0, 0, 0,},
                {0, 1, 1, 1, 0},
                {0, 1, 1, 1, 2},
                {0, 1, 1, 1, 0},
                {0, 0, 0, 0, 0} };



        Room room1 = new Room(new Integer[]{0, 0}, new Bounds(5, 5), tilesRoom1);
        assertTrue(room1.isPointWithinRoom(new Integer[]{2, 2}));
        assertFalse(room1.isPointWithinRoom(new Integer[]{17, 4}));
    }

    @Test public void checkHallwayBounds() throws Exception {
        Integer[][] waypoints = new Integer[][]{{3, 7}};
        Hallway hallway = new Hallway(new Integer[]{3, 4}, new Integer[]{9, 7}, waypoints);
        assertTrue(hallway.isPointInHallway(new Integer[]{3, 4}));
        assertTrue(hallway.isPointInHallway(new Integer[]{5, 7}));
        assertFalse(hallway.isPointInHallway(new Integer[]{4, 6}));
    }

    
    @Test public void checkLevelItems() throws Exception {
        Integer[][] tilesRoom1 = { {0, 0, 0, 0, 0, 0, 0},
                {0, 1, 1, 1, 1, 1, 0},
                {0, 1, 1, 1, 1, 1, 2},
                {0, 1, 1, 1, 1, 1, 0},
                {0, 1, 1, 1, 1, 1, 0},
                {0, 1, 1, 1, 1, 1, 0},
                {0, 0, 0, 0, 0, 0, 0} };

        Integer[][] tilesRoom2 = { {0, 0, 0, 1, 0, 0},
                {0, 1, 1, 1, 1, 0},
                {2, 1, 1, 1, 1, 0},
                {0, 1, 1, 1, 1, 0},
                {0, 1, 1, 1, 1, 0},
                {0, 1, 1, 1, 1, 0},
                {0, 1, 1, 1, 1, 0},
                {0, 1, 1, 1, 1, 0},
                {0, 0, 0, 0, 0, 0} };

        Room room1 = new Room(new Integer[]{0, 0}, new Bounds(7, 7), tilesRoom1);
        Room room2 = new Room(new Integer[]{13, 0}, new Bounds(6, 9), tilesRoom2);
        Hallway hallway = new Hallway(new Integer[]{6, 2}, new Integer[]{13, 2}, null);

        List<Room> rooms = new ArrayList<>();
        List<Hallway> hallways = new ArrayList<>();
        List<Item> items = new ArrayList<>();
        items.add(new Item("key", new Integer[]{3, 3}));
        items.add(new Item("exit", new Integer[]{2, 6}));
        rooms.add(room1);
        rooms.add(room2);
        hallways.add(hallway);
        Level level = new Level(rooms, hallways, items);
        assertEquals(level.getItems().size(), 2);
        assertEquals(level.getItems().stream().filter(i -> i.getType().equals(ItemType.key)).count(), 1);
        assertEquals(level.getItems().stream().filter(i -> i.getType().equals(ItemType.exit)).count(), 1);
    }
}
